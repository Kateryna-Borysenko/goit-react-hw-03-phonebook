{"version":3,"sources":["components/App/ContactForm/ContactForm.module.css","components/App/common/Paper/Paper.module.css","components/App/ContactForm/ContactForm.jsx","components/App/common/Paper/Paper.jsx","components/App/ContactList/ContactList.jsx","components/App/Filter/Filter.jsx","images/image.jpg","components/App/App.jsx","services/localStorage.js","index.js","components/App/App.module.css","components/App/ContactList/ContactList.module.css","components/App/Filter/Filter.module.css"],"names":["module","exports","ContactForm","state","name","number","onSubmit","e","preventDefault","props","id","nanoid","reset","onChangeInput","target","value","setState","this","className","s","contacsForm","label","title","textField","type","onChange","placeholder","required","pattern","addBtn","Component","Paper","children","styles","paper","ContactList","contacts","onDelete","contactList","map","contactListItem","contactName","deleteBtn","onClick","Filter","STORAGE_KEY","App","filter","newContact","some","contact","alert","prevState","onFilterChange","elem","toLowerCase","includes","deleteContact","savedContacts","key","JSON","parse","localStorage","getItem","error","storage","prevProps","setItem","stringify","container","image","src","alt","contantWrap","wrap","subtitle","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0f8bd3d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"ContactForm_label__132ca\",\"title\":\"ContactForm_title__1yM47\",\"textField\":\"ContactForm_textField__1gQi2\",\"addBtn\":\"ContactForm_addBtn__1QQVz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Paper_paper__1O4XZ\"};","import React, { Component } from 'react';\nimport s from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    const { name, number } = this.state;\n\n    //прилитит в App массив сontacts новый контакт - объект\n    // id:\"WIKCSp5KiPxetbZEQIvXT\"\n    // name:\"Kateryna Borysenko\"\n    // number:\"455-25-33\"\n    this.props.onSubmit({\n      id: nanoid(),\n      name, //aналог записи name: name\n      number,\n    });\n    this.reset();\n  };\n\n  onChangeInput = e => {\n    const { name, value } = e.target;\n    //когда пользователь введет данные в состояние запишется значение по ключу\n    this.setState({ [name]: value });\n  };\n\n  // важно влиять на состояние через .setState\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <form className={s.contacsForm} onSubmit={this.onSubmit}>\n        <label className={s.label}>\n          <span className={s.title}>Name:</span>\n          <input\n            className={s.textField}\n            type=\"text\"\n            onChange={this.onChangeInput}\n            value={name}\n            name=\"name\"\n            placeholder=\"example: Borysenko Kateryna\"\n            required\n          />\n        </label>\n\n        <label className={s.label}>\n          <span className={s.title}>Number:</span>\n          <input\n            className={s.textField}\n            type=\"tel\"\n            onChange={this.onChangeInput}\n            value={number}\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            placeholder=\"example: 645-17-79\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={s.addBtn}>\n          Add Contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport styles from './Paper.module.css';\n\nconst Paper = ({ children }) => {\n  return <div className={styles.paper}>{children}</div>;\n};\n\nPaper.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Paper;\n// { children }  - встроенное имя пропса тип node это всё что угодно текст тег и тд.\n","import s from './ContactList.module.css';\nimport Paper from '../common/Paper/Paper';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className={s.contactList}>\n    {contacts.map(({ id, name, number }) => (\n      <Paper key={id}>\n        <li className={s.contactListItem}>\n          <span className={s.contactName}>{name}</span>: {number}\n        </li>\n        <button\n          type=\"button\"\n          className={s.deleteBtn}\n          // первдала в props onDelete={this.deleteContact}\n          onClick={() => onDelete(id)}\n        >\n          Delete\n        </button>\n      </Paper>\n    ))}\n  </ul>\n);\n\nexport default ContactList;\n","import s from './Filter.module.css';\n// import PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => {\n  return (\n    <div>\n      <label className={s.label}>\n        <span className={s.title}>Find contacts by name</span>\n        <input\n          className={s.textField}\n          type=\"text\"\n          name=\"filter\"\n          value={value}\n          onChange={onChange}\n          placeholder=\"example: Nina\"\n        />\n      </label>\n    </div>\n  );\n};\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   label: PropTypes.string,\n//   onFilterChange: PropTypes.func.isRequired,\n// };\n\nexport default Filter;\n","export default __webpack_public_path__ + \"static/media/image.e945d855.jpg\";","import { Component } from 'react';\nimport ContactForm from './ContactForm/ContactForm';\nimport ContactList from './ContactList/ContactList';\nimport Filter from './Filter/Filter';\nimport * as storage from 'services/localStorage';\nimport image from 'images/image.jpg';\nimport s from './App.module.css';\n\nconst STORAGE_KEY = 'contacts';\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: '',\n  };\n\n  //2 cчитать данные -> запись выше\n  componentDidMount() {\n    //компонент установлен\n    const savedContacts = storage.get(STORAGE_KEY);\n    //eсли есть обновлённые данные, а не null (никаких записей)\n    if (savedContacts) {\n      this.setState({ contacts: savedContacts }); //обновляем состояние наших контактов в state\n    }\n  }\n\n  //1 если наш App измненится и вызовиться метод  componentDidUpdate(prevProps, prevState) -> то мы хотим проверит -> этот метод вызвался из-за того, что измненилися города и ответ Да -> то в этот момент мы хотим записать всё в  localStorage\n  //важно даже если длинна массива такая же проверка сравнивает по ссылки и распознает изменения и перезапишет в localStorage\n  componentDidUpdate(prevProps, prevState) {\n    //! ЗАПИСЫВАЕТ\n    const { contacts } = this.state;\n    if (prevState.contacts !== contacts) {\n      //проверка были ли изменения, если нет, то ничего не делать\n      storage.save(STORAGE_KEY, contacts); //save() -готовый метод /services\n    }\n  }\n\n  onSubmit = newContact => {\n    const { id, name, number } = newContact;\n\n    //проверка на одинаковые контакты\n    const isInContactList = contact => contact.name === newContact.name;\n\n    this.state.contacts.some(isInContactList)\n      ? alert(`${newContact.name} is already in contacts`)\n      : this.setState(prevState => ({\n          contacts: [...prevState.contacts, { id, name, number }],\n        }));\n  };\n\n  onChangeInput = e => {\n    this.setState({ filter: e.target.value });\n  };\n\n  //поиск совпадений в списке контактов\n  onFilterChange = () => {\n    const value = this.state.filter;\n    return this.state.contacts.filter(elem =>\n      elem.name.toLowerCase().includes(value.toLowerCase()),\n    );\n  };\n\n  deleteContact = id => {\n    //перезаписываем текущее состояние state -> вернёт массив без удудалённого объекта определит его по id\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(elem => elem.id !== id),\n    }));\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n\n    return (\n      <div className={s.container}>\n        <img className={s.image} src={image} alt=\"Woman\" />\n        <div className={s.contantWrap}>\n          <h1 className={s.title}>Phonebook</h1>\n          <div className={s.wrap}>\n            <ContactForm onSubmit={this.onSubmit} contacts={contacts} />\n          </div>\n          <h2 className={s.subtitle}>Contacts:</h2>\n          <Filter value={filter} onChange={this.onChangeInput} />\n          <ContactList\n            contacts={this.onFilterChange()}\n            onDelete={this.deleteContact}\n          />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const save = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    return null;\n  }\n};\n//мы пробуем что-то сохранить сразу застрингифаив или  если что-то пойдет не так конструкция вернет null\n\nconst get = key => {\n  try {\n    return JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst remove = key => {\n  try {\n    return localStorage.removeItem(key);\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { get, save, remove };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__16xz_\",\"contantWrap\":\"App_contantWrap__2Y3m3\",\"image\":\"App_image__2InBV\",\"title\":\"App_title__1YcTA\",\"subtitle\":\"App_subtitle__IMEa6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2r2jG\",\"contactListItem\":\"ContactList_contactListItem__RT1rC\",\"deleteBtn\":\"ContactList_deleteBtn__2t41x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Filter_title__3-wtF\",\"textField\":\"Filter_textField__3kynF\"};"],"sourceRoot":""}